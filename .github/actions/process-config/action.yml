name: "Process Configuration"
description: "Process and validate environment configuration"

inputs:
  issue-body:
    description: "The body content of the issue"
    required: true
  issue-number:
    description: "The issue number"
    required: true
  issue-title:
    description: "The issue title"
    required: true
  trigger-type:
    description: "What triggered this process (edit/reprocess)"
    required: true
  token:
    description: "GitHub token"
    required: true

outputs:
  is-valid:
    description: "Whether the configuration is valid"
    value: ${{ steps.validate.outputs.is-valid }}
  config-hash:
    description: "Hash of the configuration"
    value: ${{ steps.generate-hash.outputs.hash }}
  config-json:
    description: "JSON string of the configuration"
    value: ${{ steps.generate-hash.outputs.config_json }}
  vars-content:
    description: "Content of the .vars file"
    value: ${{ steps.create-vars.outputs.content }}

runs:
  using: "composite"
  steps:
    # Initial issue validation
    - name: Validate issue
      id: validate
      uses: ./.github/actions/validate-issue
      with:
        issue-body: ${{ inputs.issue-body }}
        issue-title: ${{ inputs.issue-title }}
        token: ${{ inputs.token }}

    # Notify validation failures
    - name: Notify validation issues
      if: steps.validate.outputs.is-valid != 'true'
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue-number }}
        body: |
          @${{ github.event.issue.user.login }} There are validation issues with your configuration:

          ## Validation Results
          ```json
          ${{ steps.validate.outputs.validation-results }}
          ```

          Please fix these issues and try again.
        reactions: "eyes"

    # Generate configuration hash
    - name: Generate hash
      id: generate-hash
      if: steps.validate.outputs.is-valid == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const parsedValues = JSON.parse('${{ steps.validate.outputs.parsed-values }}');
          const configString = JSON.stringify(parsedValues);

          const crypto = require('crypto');
          const hash = crypto.createHash('sha256').update(configString).digest('hex');

          core.setOutput('hash', hash);
          core.setOutput('config_json', configString);

    # Create .vars file
    - name: Create vars file
      id: create-vars
      if: steps.validate.outputs.is-valid == 'true'
      shell: bash
      run: |
        parsed_values='${{ steps.validate.outputs.parsed-values }}'
        test_id=$(echo "$parsed_values" | jq -r '.test_id')
        features=$(echo "$parsed_values" | jq -r '.features')
        docker_image=$(echo "$parsed_values" | jq -r '.docker_image')

        content=$(cat << EOF
        # Environment Configuration
        # Generated from Issue #${{ inputs.issue-number }}
        # Generated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        # Triggered by: ${{ inputs.trigger-type }}

        TEST_ID=$test_id
        FEATURES=$features
        DOCKER_IMAGE=$docker_image
        EOF
        )
        echo "$content" > .vars
        echo "content<<EOF" >> $GITHUB_OUTPUT
        echo "$content" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    # Update status comment
    - name: Update status
      uses: peter-evans/create-or-update-comment@v4.0.0
      with:
        issue-number: ${{ inputs.issue-number }}
        body: |
          ## Configuration Summary (${{ inputs.trigger-type }})
          ```json
          ${{ steps.validate.outputs.parsed-values }}
          ```

          Status: ${{ steps.validate.outputs.is-valid == 'true' && '✅ Valid' || '❌ Invalid' }}
          ${{ steps.validate.outputs.is-valid != 'true' && format('Errors: {0}', steps.validate.outputs.errors) || '' }}

          <!-- CONFIG_HASH=${{ steps.generate-hash.outputs.hash }} -->
        edit-mode: replace
